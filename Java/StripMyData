package com.opengamma.strata.pricer.capfloor;

import com.google.common.collect.ImmutableList;
import com.opengamma.strata.collect.array.DoubleArray;
import com.opengamma.strata.collect.array.DoubleMatrix;
import com.opengamma.strata.collect.tuple.Pair;
import com.opengamma.strata.market.curve.CurveMetadata;
import com.opengamma.strata.market.curve.Curves;
import com.opengamma.strata.market.curve.InterpolatedNodalCurve;
import com.opengamma.strata.market.curve.interpolator.CurveExtrapolators;
import com.opengamma.strata.market.curve.interpolator.CurveInterpolators;
import com.opengamma.strata.market.surface.interpolator.GridSurfaceInterpolator;
import com.opengamma.strata.pricer.option.RawOptionData;
import com.opengamma.strata.pricer.rate.ImmutableRatesProvider;
import com.opengamma.strata.product.capfloor.ResolvedIborCapFloorLeg;

import java.time.LocalDate;
import java.time.Period;
import java.time.ZoneId;
import java.time.ZonedDateTime;
import java.util.List;

import static com.opengamma.strata.basics.currency.Currency.USD;
import static com.opengamma.strata.basics.date.DayCounts.ACT_ACT_ISDA;
import static com.opengamma.strata.basics.index.IborIndices.USD_LIBOR_3M;
import static com.opengamma.strata.market.ValueType.NORMAL_VOLATILITY;
import static com.opengamma.strata.market.ValueType.STRIKE;

public class StripMyData {
    private static final IborCapletFloorletVolatilitiesName NAME = IborCapletFloorletVolatilitiesName.of("test");
    private static final GridSurfaceInterpolator INTERPOLATOR =
            GridSurfaceInterpolator.of(CurveInterpolators.LINEAR, CurveInterpolators.LINEAR);
    private static final DirectIborCapletFloorletVolatilityCalibrator CALIBRATOR =
            DirectIborCapletFloorletVolatilityCalibrator.standard();
    private static final double[] CAP_NORMAL_STRIKES = new double[] {
            -0.003017,	0.006983,	0.011983,	0.016983,	0.021983,	0.026983,	0.031983,	0.036983,	0.046983,	0.056983,	0.066983,	0.076983
    };

    protected static final int NUM_NORMAL_STRIKES = CAP_NORMAL_STRIKES.length;
    private static final int[] CAP_NORMAL_END_TIMES = new int[] {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 12, 15, 20, 25, 30};
    private static final int NUM_NORMAL_MATURITIES = CAP_NORMAL_END_TIMES.length;
    private static final ResolvedIborCapFloorLeg[][] CAPS_NORMAL =
            new ResolvedIborCapFloorLeg[NUM_NORMAL_STRIKES][NUM_NORMAL_MATURITIES];
    private static final double[][] CAP_NORMAL_VOLS = new double[][] {
            {0.1528,	0.4706,	0.5918,	0.7091,	0.8235,	0.9356,	1.0458,	1.1544,	1.368,	1.5774,	1.7836,	1.9872},
            {0.2171,	0.5036,0.6319,	0.7558,	0.8763,	0.994,	1.1095,	1.2231,	1.4457,	1.6634,	1.8772,	2.0877},
            {0.3291,	0.5458,	0.6535,	0.7602,	0.865,	0.9679,	1.0689,	1.1684,	1.363,	1.5529,	1.7389,	1.9216},
            {0.407,	0.5725,	0.6641,	0.7572,	0.8503,	0.9429,	1.0348,	1.1259,	1.3053,	1.4816,	1.6552,	1.8262},
            {0.4745,	0.5985,	0.6753,	0.7527,	0.8308,	0.909,	0.9873,	1.0653,	1.2203,	1.3734,	1.5248,	1.6744},
            {0.5316,	0.62,	0.6844,	0.7486,	0.8136,	0.8793,	0.9456,	1.0122,	1.1457,	1.2787,	1.4109,	1.5421},
            {0.5723,	0.6333,	0.6895,	0.7458,	0.8034,	0.8624,	0.9226,	0.9835,	1.1065,	1.2297,	1.3524,	1.4742},
            {0.6053,	0.644,	0.6918,	0.7392,	0.7878,	0.8383,	0.8903,	0.9435,	1.0524,	1.1627,	1.2732,	1.3835},
            {0.6298,	0.6523,	0.6941,	0.7356,	0.7787,	0.8239,	0.8712,	0.9201,	1.0212,	1.1245,	1.2285,	1.3324},
            {0.6479,	0.6587,	0.6959, 0.733,	0.7719,	0.8133,	0.8571,	0.903,	0.9988,	1.0975,	1.1972,	1.2971},
            {0.6674,	0.6641,	0.6929,	0.7215,	0.7517,	0.7845,	0.8198,	0.8575,	0.9379,	1.0224,	1.1089,	1.1961},
            {0.6767,	0.6654,	0.6865,	0.7079,	0.7313,	0.7574,	0.7865,	0.8181,	0.887,	0.9608,	1.037,	1.1143},
            {0.6653,	0.6522,	0.6668,	0.6823,	0.7,	0.7205,	0.7438,	0.7695,	0.8265,	0.8881,	0.9522,	1.0174},
            {0.6507,	0.6383,	0.6503,	0.6635,	0.6791,	0.6975,	0.7184,	0.7417,	0.7932,	0.849,	0.907,	0.9659},
            {0.6396,	0.6277,	0.6385,	0.6508,	0.6654,	0.6827,	0.7025,	0.7243,	0.7728,	0.8252,	0.8795,	0.9346}
    };

    private static final double[] FWD_CURVE_NODES = new double[] {
            0.0438356164383561, 0.0876712328767123, 0.172602739726027, 0.254794520547945, 0.506849315068493, 0.758904109589041,
            1.00547945205479, 2.01369863013698, 3.01020285949547, 4.00547945205479, 5.00547945205479, 6.00547945205479,
            7.01839958080694, 8.01095890410959, 9.00821917808219, 10.0082191780821, 15.0074706190583, 20.0082191780821,
            25.0109589041095, 30.0136986301369};
    private static final double[] FWD_CURVE_VALUES = new double[] {
            0.00184088091044285, 0.00201024117395892, 0.00241264832694067, 0.00280755413825359, 0.0029541307818572, 0.00310125437814943,
            0.00320054435838637, 0.00377914611772073, 0.00483320020067661, 0.00654829256979543, 0.00877749583222556, 0.0112470678648412,
            0.0136301644164456, 0.0157618031582798, 0.0176836551757772, 0.0194174141169365, 0.0254011614777518, 0.0282527762712854,
            0.0298620063409043, 0.031116719228976};
    private static final CurveMetadata FWD_META = Curves.zeroRates("fwdCurve", ACT_ACT_ISDA);
    protected static final InterpolatedNodalCurve FWD_CURVE =
            InterpolatedNodalCurve.of(FWD_META, DoubleArray.ofUnsafe(FWD_CURVE_NODES), DoubleArray.ofUnsafe(FWD_CURVE_VALUES),
                    CurveInterpolators.LINEAR, CurveExtrapolators.LINEAR, CurveExtrapolators.LINEAR);
    private static final double[] DIS_CURVE_NODES = new double[] {
            0.00273972602739726, 0.0876712328767123, 0.172602739726027, 0.254794520547945, 0.345205479452054, 0.424657534246575,
            0.506849315068493, 0.758904109589041, 1.00547945205479, 2.00547945205479, 3.01020285949547, 4.00547945205479,
            5.00547945205479, 10.0054794520547};
    private static final double[] DIS_CURVE_VALUES = new double[] {
            0.00212916045658802, 0.00144265912946933, 0.00144567477491987, 0.00135441424749791, 0.00134009103595346,
            0.00132773752749976, 0.00127592397233014, 0.00132302501180961, 0.00138688847322639, 0.00172748279241698,
            0.00254381216780551, 0.00410024606039574, 0.00628782387356631, 0.0170033466745807};
    private static final CurveMetadata DIS_META = Curves.zeroRates("dscCurve", ACT_ACT_ISDA);
    private static final InterpolatedNodalCurve DIS_CURVE = InterpolatedNodalCurve.of(
            DIS_META, DoubleArray.ofUnsafe(DIS_CURVE_NODES), DoubleArray.ofUnsafe(DIS_CURVE_VALUES),
            CurveInterpolators.DOUBLE_QUADRATIC, CurveExtrapolators.LINEAR, CurveExtrapolators.LINEAR);
    protected static final LocalDate CALIBRATION_DATE = LocalDate.of(2016, 3, 3);
    protected static final ZonedDateTime CALIBRATION_TIME = CALIBRATION_DATE.atTime(10, 0).atZone(ZoneId.of("America/New_York"));
    protected static final ImmutableRatesProvider RATES_PROVIDER = ImmutableRatesProvider.builder(CALIBRATION_DATE)
            .discountCurve(USD, DIS_CURVE)
            .iborIndexCurve(USD_LIBOR_3M, FWD_CURVE)
            .build();

    public static void main(String[] args){
        CapletStrippingSetup setup = new CapletStrippingSetup();
        double lambdaT = 0.07;
        double lambdaK = 0.07;
        double error = 1.0e-5;
        DirectIborCapletFloorletVolatilityDefinition definition = DirectIborCapletFloorletVolatilityDefinition.of(
                NAME, USD_LIBOR_3M, ACT_ACT_ISDA, lambdaT, lambdaK, INTERPOLATOR);
        ImmutableList<Period> maturities = createNormalMaturities();
        DoubleArray strikes = createNormalStrikes();
        DoubleMatrix errorMatrix = DoubleMatrix.filled(maturities.size(), strikes.size(), error);
        RawOptionData data = RawOptionData.of(
                maturities, strikes, STRIKE, createFullNormalDataMatrix(), errorMatrix, NORMAL_VOLATILITY);
        IborCapletFloorletVolatilityCalibrationResult res = CALIBRATOR.calibrate(definition, CALIBRATION_TIME, data, RATES_PROVIDER);
        NormalIborCapletFloorletExpiryStrikeVolatilities resVol =
                (NormalIborCapletFloorletExpiryStrikeVolatilities) res.getVolatilities();
        Double maxTime = (double) CAP_NORMAL_END_TIMES[CAP_NORMAL_END_TIMES.length-1];
        setup.print(res,strikes,maxTime);
    }

    protected static ImmutableList<Period> createNormalMaturities() {
        ImmutableList.Builder<Period> builder = ImmutableList.builder();
        for (int i = 0; i < NUM_NORMAL_MATURITIES; ++i) {
            builder.add(Period.ofYears(CAP_NORMAL_END_TIMES[i]));
        }
        return builder.build();
    }

    protected static DoubleArray createNormalStrikes() {
        return DoubleArray.copyOf(CAP_NORMAL_STRIKES);
    }

    protected static DoubleMatrix createFullNormalDataMatrix() {
        DoubleMatrix matrix = DoubleMatrix.ofUnsafe(CAP_NORMAL_VOLS);
        return matrix;
    }

    protected static Pair<List<ResolvedIborCapFloorLeg>, List<Double>> getCapsNormalVols(int strikeIndex) {
        ResolvedIborCapFloorLeg[] caps = CAPS_NORMAL[strikeIndex];
        double[] vols = CAP_NORMAL_VOLS[strikeIndex];
        ImmutableList.Builder<ResolvedIborCapFloorLeg> capBuilder = ImmutableList.builder();
        ImmutableList.Builder<Double> volBuilder = ImmutableList.builder();
        int nVols = vols.length;
        for (int i = 0; i < nVols; ++i) {
            if (Double.isFinite(vols[i])) {
                capBuilder.add(caps[i]);
                volBuilder.add(vols[i]);
            }
        }
        return Pair.of(capBuilder.build(), volBuilder.build());
    }
}
